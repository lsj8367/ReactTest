{"version":3,"sources":["components/TodoListTemplate.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","components/Palette.js","App.js","registerServiceWorker.js","index.js"],"names":["TodoListTemplate","form","palette","children","className","Form","value","onChange","onCreate","onKeyPress","color","style","onClick","TodoItem","nextProps","nextState","nextContext","this","props","checked","text","id","onToggle","onRemove","e","stopPropagation","Component","TodoItemList","todos","todoList","map","Color","active","background","Palette","colors","selected","onSelect","colorList","App","state","input","handleChange","setState","target","handleCreate","concat","handleKeyPress","key","handleToggle","index","findIndex","todo","nextTodos","handleRemove","filter","handleSelectColor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b27c1db2.chunk.js","sourcesContent":["// eslint-disable-next-line no-unused-vars\r\nimport React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\nconst TodoListTemplate = ({form, palette, children}) => {\r\n    return (\r\n        <main className=\"todo-list-template\">\r\n            <div className=\"title\">\r\n                오늘 할 일\r\n            </div>\r\n            <section className=\"palette-wrapper\">\r\n                {palette}\r\n            </section>\r\n            <section className=\"form-wrapper\">\r\n                {form}\r\n            </section>\r\n            <section className=\"todos-wrapper\">\r\n                {children}\r\n            </section>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default TodoListTemplate;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({value, onChange, onCreate, onKeyPress, color}) => {\r\n    return(\r\n        <div className=\"form\">\r\n            <input value={value} onChange={onChange} onKeyPress={onKeyPress} style={{color}}/>\r\n            <div className=\"create-button\" onClick={onCreate}>\r\n                추가\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Form;","import React, { Component } from 'react';\r\nimport './TodoItem.css'\r\n\r\nclass TodoItem extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n\r\n    render() {\r\n        const {text, checked, id, color, onToggle, onRemove} = this.props;\r\n\r\n        return(\r\n            <div className=\"todo-item\" onClick={() => onToggle(id)}>\r\n                <div className=\"remove\" onClick={(e) => {\r\n                    e.stopPropagation(); //onToggle이 실행되지 않도록 함\r\n                    onRemove(id)}\r\n                }>&times;</div>\r\n                <div style={{color}} className={`todo-text ${checked && 'checked'}`}>\r\n                    <div>{text}</div>\r\n                </div>\r\n                {\r\n                    checked && (<div className=\"check-mark\">✓</div>)\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nclass TodoItemList extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n\r\n    render() {\r\n        const { todos, onToggle, onRemove} = this.props;\r\n\r\n        const todoList = todos.map(\r\n            ({id, text, checked, color}) => (\r\n                <TodoItem\r\n                    id = {id}\r\n                    text = {text}\r\n                    checked={checked}\r\n                    color = {color}\r\n                    onToggle={onToggle}\r\n                    onRemove={onRemove}\r\n                    key={id} //배열 렌더링할때는 키값이 필요함.\r\n                />\r\n            )\r\n        )\r\n        return (\r\n            <div>\r\n                {todoList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItemList;","import React from 'react';\r\nimport './Palette.css';\r\n\r\nconst Color = ({ color, active, onClick}) => {\r\n    return (\r\n        <div className={`color ${active && 'active'}`} style={{background: color}} onClick={onClick}>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Palette = ({colors, selected, onSelect}) => {\r\n    const colorList = colors.map(\r\n        (color) => (<Color color={color} active={selected === color} onClick={() => onSelect(color)} key={color}/>)\r\n    );\r\n    return (\r\n        <div className=\"palette\">\r\n            {colorList}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Palette;","import React, { Component } from 'react';\r\nimport TodoListTemplate from \"./components/TodoListTemplate\";\r\nimport Form from \"./components/Form\";\r\nimport TodoItemList from \"./components/TodoItemList\";\r\nimport Palette from \"./components/Palette\";\r\n\r\nconst colors = ['#343a40', '#f03e3e', '#12b886', '#228ae6'];\r\n\r\nclass App extends Component {\r\n    id = 3; //이미 0,1,2 존재\r\n\r\n    state = {\r\n        input: '',\r\n        todos: [\r\n            // {id : 0, text: '연습', checked: false},\r\n            // {id : 1, text: '체크박스', checked: true},\r\n            // {id : 2, text: '잘 되니', checked: false},\r\n        ],\r\n        color: '#343a40',\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            input: e.target.value // input의 다음 바뀔값\r\n        });\r\n    }\r\n\r\n    handleCreate = () => {\r\n        const { input, todos, color} = this.state;\r\n        this.setState({\r\n            input : '', //인풋을 비우고\r\n            // concat을 사용해 배열추가\r\n            todos: todos.concat({\r\n                id: this.id++,\r\n                text: input,\r\n                checked: false,\r\n                color\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    handleKeyPress = (e) => {\r\n        //눌려진 키가 Enter면 handleCreate 호출\r\n        if(e.key === 'Enter'){\r\n            this.handleCreate();\r\n        }\r\n    }\r\n\r\n    handleToggle = (id) => {\r\n        const {todos} = this.state;\r\n\r\n        //파라미터로 받은 id를 가지고 몇번째 아이템인지 찾는다.\r\n        const index = todos.findIndex(todo => todo.id === id);\r\n        const selected = todos[index]; //선택한 객체\r\n\r\n        const nextTodos = [...todos]; //배열복사\r\n\r\n        //기존값들 복사하고, checked 값 덮어쓰기\r\n        nextTodos[index] = {\r\n            ...selected,\r\n            checked: !selected.checked\r\n        };\r\n\r\n        this.setState({\r\n            todos: nextTodos\r\n        })\r\n    }\r\n\r\n    handleRemove = (id) => {\r\n        const {todos} = this.state;\r\n        this.setState({\r\n            todos: todos.filter(todo => todo.id !== id)\r\n        });\r\n    }\r\n\r\n    handleSelectColor = (color) => {\r\n        this.setState({\r\n            color\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { input, todos, color} = this.state;\r\n        const {\r\n            handleChange,\r\n            handleCreate,\r\n            handleKeyPress,\r\n            handleToggle,\r\n            handleRemove,\r\n            handleSelectColor,\r\n\r\n        } = this;\r\n        return(\r\n            <TodoListTemplate form={(\r\n                <Form\r\n                    value={input}\r\n                    onKeyPress={handleKeyPress}\r\n                    onChange={handleChange}\r\n                    onCreate={handleCreate}\r\n                    color={color}\r\n                  />\r\n                )}\r\n                    palette={(\r\n                        <Palette colors={colors} selected={color} onSelect={handleSelectColor}/>\r\n                    )}>\r\n                <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\r\n            </TodoListTemplate>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            if (\r\n                response.status === 404 ||\r\n                response.headers.get('content-type').indexOf('javascript') === -1\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);\r\nregisterServiceWorker();"],"sourceRoot":""}